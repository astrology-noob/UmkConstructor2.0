// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UmkConstructor.Data;

#nullable disable

namespace UmkConstructor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("End")
                        .HasColumnType("int");

                    b.Property<int>("Start")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.BusinessRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SpecialtyId" }, "IX_BusinessRoles_SpecialtyId");

                    b.ToTable("BusinessRoles", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AcademicYearId" }, "IX_Curricula_AcademicYearId");

                    b.HasIndex(new[] { "BusinessRoleId" }, "IX_Curricula_BusinessRoleId");

                    b.ToTable("Curricula", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplines", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.DisciplineRealSemester", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationId"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterCurriculumId")
                        .HasColumnType("int");

                    b.HasKey("RelationId");

                    b.HasIndex(new[] { "DisciplineId" }, "IX_DisciplineRealSemester_DisciplineId");

                    b.HasIndex(new[] { "SemesterCurriculumId" }, "IX_DisciplineRealSemester_SemesterCurriculumId");

                    b.ToTable("DisciplineRealSemester", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Semester", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationId"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EduPracticeWeekCount")
                        .HasColumnType("int");

                    b.Property<int>("HoursTotal")
                        .HasColumnType("int");

                    b.Property<int>("IndividualWork")
                        .HasColumnType("int");

                    b.Property<int>("ProdPracticeWeekCount")
                        .HasColumnType("int");

                    b.Property<int>("SemesterTypeStudyYearId")
                        .HasColumnType("int");

                    b.Property<int>("SessionWeekCount")
                        .HasColumnType("int");

                    b.Property<int>("WeekCount")
                        .HasColumnType("int");

                    b.HasKey("RelationId");

                    b.HasIndex(new[] { "SemesterTypeStudyYearId" }, "IX_Semesters_SemesterTypeStudyYearId");

                    b.ToTable("Semesters", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterCurriculum", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationId"));

                    b.Property<int>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("RelationId");

                    b.HasIndex(new[] { "CurriculumId" }, "IX_SemesterCurriculum_CurriculumId");

                    b.HasIndex(new[] { "SemesterId" }, "IX_SemesterCurriculum_SemesterId");

                    b.ToTable("SemesterCurriculum", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SemesterTypes", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterTypeStudyYear", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationId"));

                    b.Property<int>("SemesterTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StudyYearId")
                        .HasColumnType("int");

                    b.HasKey("RelationId");

                    b.HasIndex(new[] { "SemesterTypeId" }, "IX_SemesterTypeStudyYear_SemesterTypeId");

                    b.HasIndex(new[] { "StudyYearId" }, "IX_SemesterTypeStudyYear_StudyYearId");

                    b.ToTable("SemesterTypeStudyYear", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.StudyYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAfter11thGrade")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudyYears", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Templates", (string)null);
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.TemplateOrganization", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelationId"));

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("RelationId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_TemplateOrganization_OrganizationId");

                    b.HasIndex(new[] { "TemplateId" }, "IX_TemplateOrganization_TemplateId");

                    b.ToTable("TemplateOrganizations", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.BusinessRole", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.Specialty", "Specialty")
                        .WithMany("BusinessRoles")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Curriculum", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.AcademicYear", "AcademicYear")
                        .WithMany("Curricula")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UmkConstructor.Data.DatabaseTables.BusinessRole", "BusinessRole")
                        .WithMany("Curricula")
                        .HasForeignKey("BusinessRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("BusinessRole");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.DisciplineRealSemester", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.Discipline", "Discipline")
                        .WithMany("DisciplineRealSemester")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UmkConstructor.Data.DatabaseTables.SemesterCurriculum", "SemesterCurriculum")
                        .WithMany("DisciplineRealSemester")
                        .HasForeignKey("SemesterCurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("SemesterCurriculum");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Semester", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.SemesterTypeStudyYear", "SemesterTypeStudyYear")
                        .WithMany("Semesters")
                        .HasForeignKey("SemesterTypeStudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterTypeStudyYear");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterCurriculum", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.Curriculum", "Curriculum")
                        .WithMany("SemesterCurriculum")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UmkConstructor.Data.DatabaseTables.Semester", "Semester")
                        .WithMany("SemesterCurriculum")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterTypeStudyYear", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.SemesterType", "SemesterType")
                        .WithMany("SemesterTypeStudyYear")
                        .HasForeignKey("SemesterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UmkConstructor.Data.DatabaseTables.StudyYear", "StudyYear")
                        .WithMany("SemesterTypeStudyYear")
                        .HasForeignKey("StudyYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SemesterType");

                    b.Navigation("StudyYear");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.TemplateOrganization", b =>
                {
                    b.HasOne("UmkConstructor.Data.DatabaseTables.Organization", "Organization")
                        .WithMany("TemplateOrganization")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UmkConstructor.Data.DatabaseTables.Template", "Template")
                        .WithMany("TemplateOrganization")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.AcademicYear", b =>
                {
                    b.Navigation("Curricula");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.BusinessRole", b =>
                {
                    b.Navigation("Curricula");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Curriculum", b =>
                {
                    b.Navigation("SemesterCurriculum");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Discipline", b =>
                {
                    b.Navigation("DisciplineRealSemester");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Organization", b =>
                {
                    b.Navigation("TemplateOrganization");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Semester", b =>
                {
                    b.Navigation("SemesterCurriculum");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterCurriculum", b =>
                {
                    b.Navigation("DisciplineRealSemester");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterType", b =>
                {
                    b.Navigation("SemesterTypeStudyYear");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.SemesterTypeStudyYear", b =>
                {
                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Specialty", b =>
                {
                    b.Navigation("BusinessRoles");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.StudyYear", b =>
                {
                    b.Navigation("SemesterTypeStudyYear");
                });

            modelBuilder.Entity("UmkConstructor.Data.DatabaseTables.Template", b =>
                {
                    b.Navigation("TemplateOrganization");
                });
#pragma warning restore 612, 618
        }
    }
}
